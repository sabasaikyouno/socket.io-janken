#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('websocket-study:server');
var http = require('http');
const socket = require('socket.io-client/lib/socket');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var io = require('socket.io')(server);
var janken_hand = [];
var player = [];
io.on('connection', (socket) => {
  socket.on('goo', (data) => {
    janken_hand.push(data);
    player.push(socket.id);
    game_start(socket);
  });

  socket.on('tyoki', (data) => {
    janken_hand.push(data);
    player.push(socket.id);
    game_start(socket);
  });

  socket.on('par', (data) => {
    janken_hand.push(data);
    player.push(socket.id);
    game_start(socket);
  })
  console.log(socket.id);

  socket.on('reset', (data) => {
    janken_hand.splice(0);
    player.splice(0);
    console.log("リセット");
    socket.broadcast.emit('reset2', 0);
  })
});




const game_start = (socket) => {
  if(janken_hand[1]) {
    console.log('スタート');
    janken_game(socket);
  }
}

const janken_game = (socket) => {
  if(janken_hand[0] - janken_hand[1] == 0) {
    socket.to(player[0]).emit('drow', 3);
    socket.emit('drow', 3);
    console.log("あいこ");
  }else if(janken_hand[0] == 1 && janken_hand[1] == 2) {
    socket.to(player[0]).emit('win', 0);
    socket.emit('lose', 1);
    console.log(player[0] + "の勝ち");
  }else if(janken_hand[0] == 2 && janken_hand[1] == 3) {
    socket.to(player[0]).emit('win', 0);
    socket.emit('lose', 1);
    console.log(player[0] + "の勝ち");
  }else if(janken_hand[0] == 3 && janken_hand[1] == 1) {
    socket.to(player[0]).emit('win', 0);
    socket.emit('lose', 1);
    console.log(player[0] + "の勝ち");
  }else{
    console.log(player[1] + "の勝ち");

    socket.to(player[0]).emit('lose', 1);
    socket.emit('win', 0);
  }

}